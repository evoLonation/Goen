// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: sql.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteCardPayment = `-- name: DeleteCardPayment :exec
delete from card_payment where goen_id = ?
`

func (q *Queries) DeleteCardPayment(ctx context.Context, goenID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCardPayment, goenID)
	return err
}

const deleteCashDesk = `-- name: DeleteCashDesk :exec
delete from cash_desk where id = ?
`

func (q *Queries) DeleteCashDesk(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCashDesk, id)
	return err
}

const deleteCashPayment = `-- name: DeleteCashPayment :exec
delete from cash_payment where goen_id = ?
`

func (q *Queries) DeleteCashPayment(ctx context.Context, goenID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCashPayment, goenID)
	return err
}

const deleteCashier = `-- name: DeleteCashier :exec
delete from cashier where id = ?
`

func (q *Queries) DeleteCashier(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCashier, id)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
delete from item where barcode = ?
`

func (q *Queries) DeleteItem(ctx context.Context, barcode int32) error {
	_, err := q.db.ExecContext(ctx, deleteItem, barcode)
	return err
}

const deleteOrderEntry = `-- name: DeleteOrderEntry :exec
delete from order_entry where goen_id = ?
`

func (q *Queries) DeleteOrderEntry(ctx context.Context, goenID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderEntry, goenID)
	return err
}

const deleteOrderProduct = `-- name: DeleteOrderProduct :exec
delete from order_product where id = ?
`

func (q *Queries) DeleteOrderProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderProduct, id)
	return err
}

const deletePayment = `-- name: DeletePayment :exec
delete from payment where goen_id = ?
`

func (q *Queries) DeletePayment(ctx context.Context, goenID int32) error {
	_, err := q.db.ExecContext(ctx, deletePayment, goenID)
	return err
}

const deleteProductCatalog = `-- name: DeleteProductCatalog :exec
delete from product_catalog where id = ?
`

func (q *Queries) DeleteProductCatalog(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductCatalog, id)
	return err
}

const deleteSale = `-- name: DeleteSale :exec
delete from sale where goen_id = ?
`

func (q *Queries) DeleteSale(ctx context.Context, goenID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSale, goenID)
	return err
}

const deleteSalesLineItem = `-- name: DeleteSalesLineItem :exec
delete from sales_line_item where goen_id = ?
`

func (q *Queries) DeleteSalesLineItem(ctx context.Context, goenID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSalesLineItem, goenID)
	return err
}

const deleteStore = `-- name: DeleteStore :exec
delete from store where id = ?
`

func (q *Queries) DeleteStore(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
delete from supplier where id = ?
`

func (q *Queries) DeleteSupplier(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSupplier, id)
	return err
}

const insertCardPayment = `-- name: InsertCardPayment :exec
insert into card_payment (
    card_account_number ,
    expiry_date ,
    goen_payment_id
) values (? ,? ,?)
`

type InsertCardPaymentParams struct {
	CardAccountNumber sql.NullString
	ExpiryDate        sql.NullTime
	GoenPaymentID     sql.NullInt32
}

func (q *Queries) InsertCardPayment(ctx context.Context, arg InsertCardPaymentParams) error {
	_, err := q.db.ExecContext(ctx, insertCardPayment, arg.CardAccountNumber, arg.ExpiryDate, arg.GoenPaymentID)
	return err
}

const insertCashDesk = `-- name: InsertCashDesk :exec
insert into cash_desk (
    id ,
    name ,
    is_opened,
    store_id
) values (? ,? ,?, ? )
`

type InsertCashDeskParams struct {
	ID       int32
	Name     sql.NullString
	IsOpened sql.NullBool
	StoreID  sql.NullInt32
}

func (q *Queries) InsertCashDesk(ctx context.Context, arg InsertCashDeskParams) error {
	_, err := q.db.ExecContext(ctx, insertCashDesk,
		arg.ID,
		arg.Name,
		arg.IsOpened,
		arg.StoreID,
	)
	return err
}

const insertCashPayment = `-- name: InsertCashPayment :exec
insert into cash_payment (
    balance,
    goen_payment_id
) values (? ,?)
`

type InsertCashPaymentParams struct {
	Balance       sql.NullFloat64
	GoenPaymentID sql.NullInt32
}

func (q *Queries) InsertCashPayment(ctx context.Context, arg InsertCashPaymentParams) error {
	_, err := q.db.ExecContext(ctx, insertCashPayment, arg.Balance, arg.GoenPaymentID)
	return err
}

const insertCashier = `-- name: InsertCashier :exec
insert into cashier (
    id ,
    name,
    store_id
) values (? ,?, ?)
`

type InsertCashierParams struct {
	ID      int32
	Name    sql.NullString
	StoreID sql.NullInt32
}

func (q *Queries) InsertCashier(ctx context.Context, arg InsertCashierParams) error {
	_, err := q.db.ExecContext(ctx, insertCashier, arg.ID, arg.Name, arg.StoreID)
	return err
}

const insertItem = `-- name: InsertItem :exec
insert into item (
    barcode ,
    name ,
    price ,
    stock_number ,
    order_price,
    store_id,
    product_catalog_id
) values (? ,? ,? ,? ,? ,?,?)
`

type InsertItemParams struct {
	Barcode          int32
	Name             sql.NullString
	Price            sql.NullFloat64
	StockNumber      sql.NullInt32
	OrderPrice       sql.NullFloat64
	StoreID          sql.NullInt32
	ProductCatalogID sql.NullInt32
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) error {
	_, err := q.db.ExecContext(ctx, insertItem,
		arg.Barcode,
		arg.Name,
		arg.Price,
		arg.StockNumber,
		arg.OrderPrice,
		arg.StoreID,
		arg.ProductCatalogID,
	)
	return err
}

const insertOrderEntry = `-- name: InsertOrderEntry :exec
insert into order_entry (
    quantity ,
    sub_amount ,
    item_id,
    order_product_id
) values (? ,? ,?,?)
`

type InsertOrderEntryParams struct {
	Quantity       sql.NullInt32
	SubAmount      sql.NullFloat64
	ItemID         sql.NullInt32
	OrderProductID sql.NullInt32
}

func (q *Queries) InsertOrderEntry(ctx context.Context, arg InsertOrderEntryParams) error {
	_, err := q.db.ExecContext(ctx, insertOrderEntry,
		arg.Quantity,
		arg.SubAmount,
		arg.ItemID,
		arg.OrderProductID,
	)
	return err
}

const insertOrderProduct = `-- name: InsertOrderProduct :exec
insert into order_product (
    id ,
    time ,
    order_status ,
    amount ,
    supplier_id
) values (? ,? ,? ,? ,?)
`

type InsertOrderProductParams struct {
	ID          int32
	Time        sql.NullTime
	OrderStatus sql.NullInt32
	Amount      sql.NullFloat64
	SupplierID  sql.NullInt32
}

func (q *Queries) InsertOrderProduct(ctx context.Context, arg InsertOrderProductParams) error {
	_, err := q.db.ExecContext(ctx, insertOrderProduct,
		arg.ID,
		arg.Time,
		arg.OrderStatus,
		arg.Amount,
		arg.SupplierID,
	)
	return err
}

const insertPayment = `-- name: InsertPayment :exec
insert into payment (
    goen_type,
    amount_tendered

) values (?,? )
`

type InsertPaymentParams struct {
	GoenType       int32
	AmountTendered sql.NullFloat64
}

func (q *Queries) InsertPayment(ctx context.Context, arg InsertPaymentParams) error {
	_, err := q.db.ExecContext(ctx, insertPayment, arg.GoenType, arg.AmountTendered)
	return err
}

const insertProductCatalog = `-- name: InsertProductCatalog :exec
insert into product_catalog (
    id ,
    name,
    store_id
) values (? ,?, ?)
`

type InsertProductCatalogParams struct {
	ID      int32
	Name    sql.NullString
	StoreID sql.NullInt32
}

func (q *Queries) InsertProductCatalog(ctx context.Context, arg InsertProductCatalogParams) error {
	_, err := q.db.ExecContext(ctx, insertProductCatalog, arg.ID, arg.Name, arg.StoreID)
	return err
}

const insertSale = `-- name: InsertSale :exec
insert into sale (
    time ,
    is_complete ,
    amount ,
    is_readyto_pay,
    payment_id,
    store_id,
    cash_desk_id
) values (? ,? ,? ,?, ?,?,? )
`

type InsertSaleParams struct {
	Time         sql.NullTime
	IsComplete   sql.NullBool
	Amount       sql.NullFloat64
	IsReadytoPay sql.NullBool
	PaymentID    sql.NullInt32
	StoreID      sql.NullInt32
	CashDeskID   sql.NullInt32
}

func (q *Queries) InsertSale(ctx context.Context, arg InsertSaleParams) error {
	_, err := q.db.ExecContext(ctx, insertSale,
		arg.Time,
		arg.IsComplete,
		arg.Amount,
		arg.IsReadytoPay,
		arg.PaymentID,
		arg.StoreID,
		arg.CashDeskID,
	)
	return err
}

const insertSalesLineItem = `-- name: InsertSalesLineItem :exec
insert into sales_line_item (
    quantity ,
    subamount,
    item_id,
    sale_id
) values (? ,?,?,? )
`

type InsertSalesLineItemParams struct {
	Quantity  sql.NullInt32
	Subamount sql.NullFloat64
	ItemID    sql.NullInt32
	SaleID    sql.NullInt32
}

func (q *Queries) InsertSalesLineItem(ctx context.Context, arg InsertSalesLineItemParams) error {
	_, err := q.db.ExecContext(ctx, insertSalesLineItem,
		arg.Quantity,
		arg.Subamount,
		arg.ItemID,
		arg.SaleID,
	)
	return err
}

const insertStore = `-- name: InsertStore :exec
insert into store (
    id ,
    name ,
    address ,
    is_opened
) values (? ,? ,? ,? )
`

type InsertStoreParams struct {
	ID       int32
	Name     sql.NullString
	Address  sql.NullString
	IsOpened sql.NullBool
}

func (q *Queries) InsertStore(ctx context.Context, arg InsertStoreParams) error {
	_, err := q.db.ExecContext(ctx, insertStore,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.IsOpened,
	)
	return err
}

const insertSupplier = `-- name: InsertSupplier :exec
insert into supplier (
    id ,
    name
) values (? ,? )
`

type InsertSupplierParams struct {
	ID   int32
	Name sql.NullString
}

func (q *Queries) InsertSupplier(ctx context.Context, arg InsertSupplierParams) error {
	_, err := q.db.ExecContext(ctx, insertSupplier, arg.ID, arg.Name)
	return err
}

const selectCardPayment = `-- name: SelectCardPayment :one
select goen_id, card_account_number, expiry_date, goen_payment_id from card_payment where goen_id = ?
`

func (q *Queries) SelectCardPayment(ctx context.Context, goenID int32) (CardPayment, error) {
	row := q.db.QueryRowContext(ctx, selectCardPayment, goenID)
	var i CardPayment
	err := row.Scan(
		&i.GoenID,
		&i.CardAccountNumber,
		&i.ExpiryDate,
		&i.GoenPaymentID,
	)
	return i, err
}

const selectCashDesk = `-- name: SelectCashDesk :one
select id, name, is_opened, store_id from cash_desk where id = ?
`

func (q *Queries) SelectCashDesk(ctx context.Context, id int32) (CashDesk, error) {
	row := q.db.QueryRowContext(ctx, selectCashDesk, id)
	var i CashDesk
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsOpened,
		&i.StoreID,
	)
	return i, err
}

const selectCashPayment = `-- name: SelectCashPayment :one
select goen_id, balance, goen_payment_id from cash_payment where goen_id = ?
`

func (q *Queries) SelectCashPayment(ctx context.Context, goenID int32) (CashPayment, error) {
	row := q.db.QueryRowContext(ctx, selectCashPayment, goenID)
	var i CashPayment
	err := row.Scan(&i.GoenID, &i.Balance, &i.GoenPaymentID)
	return i, err
}

const selectCashier = `-- name: SelectCashier :one
select id, name, store_id from cashier where id = ?
`

func (q *Queries) SelectCashier(ctx context.Context, id int32) (Cashier, error) {
	row := q.db.QueryRowContext(ctx, selectCashier, id)
	var i Cashier
	err := row.Scan(&i.ID, &i.Name, &i.StoreID)
	return i, err
}

const selectItem = `-- name: SelectItem :one
select barcode, name, price, stock_number, order_price, store_id, product_catalog_id from item where barcode = ?
`

func (q *Queries) SelectItem(ctx context.Context, barcode int32) (Item, error) {
	row := q.db.QueryRowContext(ctx, selectItem, barcode)
	var i Item
	err := row.Scan(
		&i.Barcode,
		&i.Name,
		&i.Price,
		&i.StockNumber,
		&i.OrderPrice,
		&i.StoreID,
		&i.ProductCatalogID,
	)
	return i, err
}

const selectOrderEntry = `-- name: SelectOrderEntry :one
select goen_id, quantity, sub_amount, item_id, order_product_id from order_entry where goen_id = ?
`

func (q *Queries) SelectOrderEntry(ctx context.Context, goenID int32) (OrderEntry, error) {
	row := q.db.QueryRowContext(ctx, selectOrderEntry, goenID)
	var i OrderEntry
	err := row.Scan(
		&i.GoenID,
		&i.Quantity,
		&i.SubAmount,
		&i.ItemID,
		&i.OrderProductID,
	)
	return i, err
}

const selectOrderProduct = `-- name: SelectOrderProduct :one
select id, time, order_status, amount, supplier_id from order_product where id = ?
`

func (q *Queries) SelectOrderProduct(ctx context.Context, id int32) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, selectOrderProduct, id)
	var i OrderProduct
	err := row.Scan(
		&i.ID,
		&i.Time,
		&i.OrderStatus,
		&i.Amount,
		&i.SupplierID,
	)
	return i, err
}

const selectPayment = `-- name: SelectPayment :one
select goen_type, goen_id, amount_tendered from payment where goen_id = ?
`

func (q *Queries) SelectPayment(ctx context.Context, goenID int32) (Payment, error) {
	row := q.db.QueryRowContext(ctx, selectPayment, goenID)
	var i Payment
	err := row.Scan(&i.GoenType, &i.GoenID, &i.AmountTendered)
	return i, err
}

const selectProductCatalog = `-- name: SelectProductCatalog :one
select id, name, store_id from product_catalog where id = ?
`

func (q *Queries) SelectProductCatalog(ctx context.Context, id int32) (ProductCatalog, error) {
	row := q.db.QueryRowContext(ctx, selectProductCatalog, id)
	var i ProductCatalog
	err := row.Scan(&i.ID, &i.Name, &i.StoreID)
	return i, err
}

const selectSale = `-- name: SelectSale :one
select goen_id, time, is_complete, amount, is_readyto_pay, payment_id, store_id, cash_desk_id from sale where goen_id = ?
`

func (q *Queries) SelectSale(ctx context.Context, goenID int32) (Sale, error) {
	row := q.db.QueryRowContext(ctx, selectSale, goenID)
	var i Sale
	err := row.Scan(
		&i.GoenID,
		&i.Time,
		&i.IsComplete,
		&i.Amount,
		&i.IsReadytoPay,
		&i.PaymentID,
		&i.StoreID,
		&i.CashDeskID,
	)
	return i, err
}

const selectSalesLineItem = `-- name: SelectSalesLineItem :one
select goen_id, quantity, subamount, item_id, sale_id from sales_line_item where goen_id = ?
`

func (q *Queries) SelectSalesLineItem(ctx context.Context, goenID int32) (SalesLineItem, error) {
	row := q.db.QueryRowContext(ctx, selectSalesLineItem, goenID)
	var i SalesLineItem
	err := row.Scan(
		&i.GoenID,
		&i.Quantity,
		&i.Subamount,
		&i.ItemID,
		&i.SaleID,
	)
	return i, err
}

const selectStore = `-- name: SelectStore :one
select id, name, address, is_opened from store where id = ?
`

func (q *Queries) SelectStore(ctx context.Context, id int32) (Store, error) {
	row := q.db.QueryRowContext(ctx, selectStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.IsOpened,
	)
	return i, err
}

const selectSupplier = `-- name: SelectSupplier :one
select id, name from supplier where id = ?
`

func (q *Queries) SelectSupplier(ctx context.Context, id int32) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, selectSupplier, id)
	var i Supplier
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
